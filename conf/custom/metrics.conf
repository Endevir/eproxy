lua_shared_dict prometheus_metrics 10M;
# lua_package_path "/path/to/nginx-lua-prometheus/?.lua;;";

init_worker_by_lua_block {
  prometheus = require("prometheus").init("prometheus_metrics", {error_metric_name="eproxy_errors_total", sync_interval=3})
  metric_requests = prometheus:counter(
    "eproxy_http_req_total", "Number of HTTP requests", {"host", "status"})
  metric_connections = prometheus:gauge(
    "eproxy_http_connections", "Number of HTTP connections", {"state"})
  metric_latency = prometheus:histogram(
    "eproxy_http_req_duration_ms", "HTTP request latency", {"host"}, {100,200,500,1000,2000,3000,5000,8000,10000,30000,60000})
  metric_backend_latency = prometheus:histogram(
    "eproxy_http_proxy_response_time_ms", "HTTP upstream response latency", {"upstream"}, {100,200,500,1000,2000,3000,5000,8000,10000,30000,60000})
  metric_bans = prometheus:counter(
    "eproxy_bans_total", "Number of bans", {"host", "rule"})

  metric_requests_by_country = prometheus:counter(
    "eproxy_http_req_total_by_country", "Number of HTTP requests by country", {"host", "status", "country"})
  metric_requests_by_asn = prometheus:counter(
    "eproxy_http_req_total_by_asn", "Number of HTTP requests by ASN", {"host", "status", "asn"})
  metric_requests_by_path = prometheus:counter(
    "eproxy_http_req_total_by_path", "Number of HTTP requests by path", {"host", "path"})
  metric_backend_latency_by_path = prometheus:gauge(
    "eproxy_http_backend_latency_by_path", "HTTP upstream responce latency by path", {"upstream", "path"})
}

server {
    listen 9145 default_server;
    server_name _;
    root /var/www/html;
    location /metrics {
        content_by_lua_block {
            metric_connections:set(ngx.var.connections_reading, {"reading"})
            metric_connections:set(ngx.var.connections_waiting, {"waiting"})
            metric_connections:set(ngx.var.connections_writing, {"writing"})
            prometheus:collect()
        }
    }
}
